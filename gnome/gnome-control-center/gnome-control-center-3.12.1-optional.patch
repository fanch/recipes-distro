From a485992913ec84a4c558cad535dd8a2ab14b0c19 Mon Sep 17 00:00:00 2001
From: Alexandre Rostovtsev <tetromino@gentoo.org>
Date: Fri, 25 Apr 2014 22:17:24 +0200
Subject: [PATCH 1/2] Make bluetooth/colord/goa/kerberos/wacom optional

Upstream is not interested in any part of this patch:

https://bugzilla.gnome.org/show_bug.cgi?id=686840
https://bugzilla.gnome.org/show_bug.cgi?id=697478
https://bugzilla.gnome.org/show_bug.cgi?id=700145

Dropped mm from this revision of the patch since it appears more
complicated than ever to split it from the network panel.

Signed-Off: Gilles Dartiguelongue <eva@gentoo.org>
---

diff --git a/configure.ac b/configure.ac
index 511f78d..f82108e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -292,15 +353,27 @@ case $host_os in
     if test "$host_cpu" = s390 -o "$host_cpu" = s390x; then
       have_wacom=no
     else
-      PKG_CHECK_MODULES(WACOM_PANEL, $COMMON_MODULES
-                        gnome-settings-daemon >= $GSD_REQUIRED_VERSION
-                        xi >= 1.2 x11 libwacom >= $LIBWACOM_REQUIRED_VERSION
-                        gnome-desktop-3.0 >= $GNOME_DESKTOP_REQUIRED_VERSION
-                        clutter-gtk-1.0
-                        clutter-1.0 >= $CLUTTER_REQUIRED_VERSION)
-      have_wacom=yes
-      AC_DEFINE(BUILD_WACOM, 1, [Define to 1 to build the Wacom panel])
-      AC_DEFINE(HAVE_WACOM, 1, [Define to 1 is Wacom is supportted])
+      AC_ARG_ENABLE(wacom,
+                    AC_HELP_STRING([--disable-wacom],
+                                   [disable wacom management panel]),
+                    [case "${enableval}" in
+                            yes) WANT_WACOM=yes ;;
+                            no) WANT_WACOM=no ;;
+                            *) AC_MSG_ERROR(bad value ${enableval} for --disable-wacom) ;;
+		    esac],
+		    [WANT_WACOM=yes]) dnl Default value
+
+      if test x$WANT_WACOM = xyes; then
+        PKG_CHECK_MODULES(WACOM_PANEL, $COMMON_MODULES
+                          gnome-settings-daemon >= $GSD_REQUIRED_VERSION
+                          xi >= 1.2 x11 libwacom >= $LIBWACOM_REQUIRED_VERSION
+                          gnome-desktop-3.0 >= $GNOME_DESKTOP_REQUIRED_VERSION
+                          clutter-gtk-1.0
+                          clutter-1.0 >= $CLUTTER_REQUIRED_VERSION)
+        have_wacom=yes
+        AC_DEFINE(BUILD_WACOM, 1, [Define to 1 to build the Wacom panel])
+        AC_DEFINE(HAVE_WACOM, 1, [Define to 1 is Wacom is supportted])
+      fi
     fi
     ;;
   *)
@@ -310,16 +383,22 @@ esac
 AM_CONDITIONAL(BUILD_WACOM, [test x${have_wacom} = xyes])
 
 # Kerberos kerberos support
-AC_PATH_PROG(KRB5_CONFIG, krb5-config, no)
-if test "$KRB5_CONFIG" = "no"; then
-  AC_MSG_ERROR([krb5-config executable not found in your path - should be installed with the kerberos libraries])
-fi
-
-AC_MSG_CHECKING(for krb5 libraries and flags)
-KRB5_CFLAGS="`$KRB5_CONFIG --cflags`"
-KRB5_LIBS="`$KRB5_CONFIG --libs`"
-AC_MSG_RESULT($KRB5_CFLAGS $KRB5_LIBS)
+AC_ARG_ENABLE([kerberos],
+              AS_HELP_STRING([--disable-kerberos], [disable kerberos support (default: enabled)]),,
+              [enable_kerberos=yes])
+
+if test x"$enable_kerberos" != x"no" ; then
+    AC_PATH_PROG(KRB5_CONFIG, krb5-config, no)
+    if test "$KRB5_CONFIG" = "no"; then
+      AC_MSG_ERROR([krb5-config executable not found in your path - should be installed with the kerberos libraries])
+    fi
 
+    AC_MSG_CHECKING(for krb5 libraries and flags)
+    KRB5_CFLAGS="`$KRB5_CONFIG --cflags`"
+    KRB5_LIBS="`$KRB5_CONFIG --libs`"
+    AC_MSG_RESULT($KRB5_CFLAGS $KRB5_LIBS)
+    AC_DEFINE(HAVE_KERBEROS, 1, [defined if krb5 is available])
+fi
 AC_SUBST(KRB5_CFLAGS)
 AC_SUBST(KRB5_LIBS)
 

--- a/panels/user-accounts/um-realm-manager.c
+++ b/panels/user-accounts/um-realm-manager.c
@@ -22,7 +22,9 @@
 
 #include "um-realm-manager.h"
 
+#ifdef HAVE_KERBEROS
 #include <krb5/krb5.h>
+#endif
 
 #include <glib.h>
 #include <glib/gi18n.h>
@@ -696,6 +698,7 @@ login_closure_free (gpointer data)
         g_slice_free (LoginClosure, login);
 }
 
+#ifdef HAVE_KERBEROS
 static krb5_error_code
 login_perform_kinit (krb5_context k5,
                      const gchar *realm,
@@ -759,12 +762,14 @@ login_perform_kinit (krb5_context k5,
 
         return code;
 }
+#endif /* HAVE_KERBEROS */
 
 static void
 kinit_thread_func (GSimpleAsyncResult *async,
                    GObject *object,
                    GCancellable *cancellable)
 {
+#ifdef HAVE_KERBEROS
         LoginClosure *login = g_simple_async_result_get_op_res_gpointer (async);
         krb5_context k5 = NULL;
         krb5_error_code code;
@@ -842,6 +847,10 @@ kinit_thread_func (GSimpleAsyncResult *async,
 
         if (k5)
                 krb5_free_context (k5);
+#else /* HAVE_KERBEROS */
+        g_simple_async_result_set_error (async, UM_REALM_ERROR, UM_REALM_ERROR_GENERIC,
+                                         _("gnome-control-center was built without kerberos support"));
+#endif
 }
 
 void

